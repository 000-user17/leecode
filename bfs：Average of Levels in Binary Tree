/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    //bfs：时间复杂度O(n),  space O(n)
    //利用一个队列来保存每一层的节点，并且用children来保存下一层的节点
    //依次的对每一层节点进行相加求和，除以节点个数，放入结果ans数组中
public:
    void helpbfs(TreeNode *root){
        helpbfs(root->left);
        helpbfs(root->right);
    }
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> ans;
        queue<TreeNode*> q;
        ans.emplace_back(double(root->val));
        q.push(root);
        int count=0; 
        double sum=0;
        while(!q.empty()){
            vector<TreeNode*> children;
            while(!q.empty()){
                TreeNode* temp = q.front();
                if(temp->left){
                    sum += temp->left->val;
                    children.emplace_back(temp->left);
                    ++count;
                }
                if(temp->right){
                    sum += temp->right->val;
                    children.emplace_back(temp->right);
                    ++count;
                }
                q.pop();
            }
            if(count)
                ans.emplace_back(sum/count);
            sum=0; count=0;
            for(int i=0 ; i<children.size(); ++i) q.push(children[i]);
        }
        return ans;
    }
};
/*官方bfs，利用到了新的函数q.size()代表队列中元素个数
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        auto averages = vector<double>();
        auto q = queue<TreeNode*>();
        q.push(root);
        while (!q.empty()) {
            double sum = 0;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto node = q.front();
                q.pop();
                sum += node->val;
                auto left = node->left, right = node->right;
                if (left != nullptr) {
                    q.push(left);
                }
                if (right != nullptr) {
                    q.push(right);
                }
            }
            averages.push_back(sum / size);
        }
        return averages;
    }
};
*/
