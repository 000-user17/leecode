/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//思路：前序遍历，时间复杂度O(n),空间复杂度O(h)  ,n为节点数，h为树高
//因为根节点前不加括号，所以先让ans添加根节点值，并且判断根节点是否左子树为空，如果为空要添加(),再predfs右子树
//同样的，如果根节点左子树不为空，则predfs(root->left),predfs(root->right)
//predfs函数表示先加入(,再加入root->val, 在一个节点predfs完之后再键入).
    void predfs(TreeNode *root, string &ans){
        if(!root) return;
        ans.push_back('(');  //string不能用emplace_back  
        //节点值之前总有(
        ans.append(to_string(root->val));
        if(!root->left && root->right) { //特殊情况，没有左子树
            ans.append("()");
            predfs(root->right, ans);
        }
        else{
            predfs(root->left, ans);
        
            predfs(root->right, ans);
        }
        ans.push_back(')');  //某一节点遍历完之后加入)
    }

    string tree2str(TreeNode* root) {
        string ans;
        ans.append(to_string(root->val));
        if(!root->left && root->right) ans.append("()");
        predfs(root->left, ans);
        predfs(root->right, ans);
        return ans;
    }
};
