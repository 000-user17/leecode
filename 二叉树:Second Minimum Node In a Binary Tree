/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//时间复杂度 O(n) space O(1)
//思路：直接前序遍历，保存最小值和第二小值
    bool flag=false;//设置flag看第二小值是否被改变过，第一次改变则取非，最后不返回-1
    void preorder(TreeNode *root, int &min_f, int &min_s){//min_f最小值，min_s次小值
        if(!root) return;
        if(root->val < min_f){
            min_f = root->val;
        }
        else if(root->val > min_f && root->val <= min_s){
            min_s = root->val;
            if(!flag)
                flag=!flag;
        }
        preorder(root->left, min_f, min_s);
        preorder(root->right, min_f, min_s);
    }
    int findSecondMinimumValue(TreeNode* root) {
        int min_f = INT_MAX, min_s = INT_MAX;
        preorder(root, min_f, min_s);
        return flag?min_s:-1;
    }
};
