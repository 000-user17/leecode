class Solution {
    //双指针替换
    //s就是转成string类型等效于vowels = std::string("aeiouAEIOU")。
    /*学习到了新的语法貌似可以加速时间，就是用auto定义一个类似的匿名函数，利用字符串查找特性来解‘
    aotu表示c++自己去匹配类型*/
public:
    /*bool notvowel(char x){
        if(x == 'a' || x=='e' || x=='i' || x=='o' || x=='u' || x == 'A' || x=='E' || x=='I' || x=='O' || x=='U' )
        return false;
        return true;
    }*/
    string reverseVowels(string s) {
        //新语法可以替换上面的函数
        /*auto notvowel = [vowels = "aeiouAEIOU"s](char x){
            return vowels.find(x) == string::npos;
        };*/
       // string vowels = std::string("aeiouAEIOU");
       
       //也可以用下面的语句替换
        string vowels = "aeiouAEIOU";
        auto notvowel = [vowels](char x){
            return vowels.find(x) == string::npos;
        };
        //查找字符串a是否包含子串b,不是用strA.find(strB) > 0 而是 strA.find(strB) != string:npos其中string:npos是个特殊值，说明查找没有匹配
        int left = 0, right = s.size()-1;
        while(left<right){
            while(notvowel(s[left]) && left<right)  ++left;
            while(notvowel(s[right]) && left<right) --right;
            swap(s[left++], s[right--]);
        }
        
       /* int left = 0, right = s.size()-1;
        while(left<right){
            while(notvowel(s[left]) && left<right)  ++left;
            while(notvowel(s[right]) && left<right) --right;
            swap(s[left++], s[right--]);
        }*/
        return s;
    }
};
