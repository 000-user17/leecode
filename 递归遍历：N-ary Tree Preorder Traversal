/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
//runtime complexity O(n) ,n为节点个数，  space O(h), h为树高
//思路：利用dfs对节点的每一个children中的元素做dfs，并按照前序遍历规则，先把节点val放入ans数组，再进行dfs
    void preorderdfs(Node* root, vector<int> &ans){
        if(!root) return ;
        ans.emplace_back(root->val);
        for(auto child : root->children){
            preorderdfs(child, ans);
        }
    }
    vector<int> preorder(Node* root) {
        vector<int> ans;
        preorderdfs(root, ans);
        return ans;
    }
};
