/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public://++i速度更快
//思路：利用二叉树深度的思想，利用dfs找各个子树中的最大深度，并返回最大深度加上当前节点root代表的深度
    int maxDepth(Node* root) {
        if(!root) return 0;
        int maxcur = 0;
        for(auto child : root->children){
            maxcur = max(maxDepth(child), maxcur);
        }
        return maxcur+1;
    }
};

/*class Solution {
public://++i速度更快
    int helpmax(vector<int> children_val){
        int maxcur = 0;  //maxcur必须设置为0，因为如果设置为INT_MAX的话，会让没有children的节点直接返回INT_MAX
        //这样导致最后会返回一个很小的接近INT_MAX的值，因此，如果没children直接返回0，helpdfs也会+1，得到当前深度
        for(int i=0 ; i<children_val.size() ; ++i){
            if(children_val[i] > maxcur) 
                maxcur = children_val[i];
        }
        return maxcur;
    }

//思路：利用二叉树深度的思想，利用dfs找各个子树中的最大深度，并返回最大深度加上当前节点root代表的深度
    int helpdfs(Node* root){
        if(!root) return 0;
        //if(root->children.size() == 0){
        //    return 1;
        //}    如果将maxcur函数初始为INT_MAX就要这样子*
        vector<int> temp(root->children.size());
        for(int i=0; i<root->children.size() ; ++i){
            temp[i] = helpdfs(root->children[i]);
        }
        return helpmax(temp)+1;
    }

    int maxDepth(Node* root) {
        return helpdfs(root);
    }
};*/
