class Solution {
public:
//贪心算法，时间复杂度O(n), 空间复杂O(1)
//思路：由于后面的位置是否能到达是由前面位置元素所决定的，并且后面位置能到达的最远位置是由自身决定的。因此，只需要从前往后，看前面元素能到达的位置中是否包括后面的位置，再从能到达的后面位置看能到达的最远位置，如果超过或等于最右边位置，则返回true
    bool canJump(vector<int>& nums) {
        int maxstep=0, n=nums.size();//maxstep表示能到达的最右边最远位置
        for(int i=0 ; i<n ; ++i){
            if(maxstep >= i){//如果能到达该位置
                maxstep = max(maxstep, nums[i]+i);//则更新maxstep为当前位置能到达的最远位置
                if(maxstep >= n-1)
                    return true;
            }
        }
        return false;
    }
};

/*class Solution {
public:
//从后往前看，如果前面某个位置能到达当前终点位置，则让该位置成为新的终点位置向前回溯，如果最终能回溯到index=0，并且能到达重点位置，则true .  会爆时间
    void backtrace(vector<int> nums, int index, int termimal_len, bool &canjump){
        if(!canjump && nums[index]+index >= termimal_len){
            if(index == 0){
                canjump = true;
                return ;
            }
            for(int i=1 ; i<=index ; ++i){
                backtrace(nums,  index-i, index, canjump);
            }
        }
    }
    bool canJump(vector<int>& nums) {
        bool canjump=false;
        backtrace(nums, nums.size()-1, nums.size()-1, canjump);
        return canjump;
    }
};*/
